// Code generated by counterfeiter. DO NOT EDIT.
package injestionfakes

import (
	"context"
	"sync"
)

// FakeMessage ...
type FakeMessage struct {
	AckStub        func() error
	ackMutex       sync.RWMutex
	ackArgsForCall []struct {
	}
	ackReturns struct {
		result1 error
	}
	ackReturnsOnCall map[int]struct {
		result1 error
	}
	ContextStub        func() context.Context
	contextMutex       sync.RWMutex
	contextArgsForCall []struct {
	}
	contextReturns struct {
		result1 context.Context
	}
	contextReturnsOnCall map[int]struct {
		result1 context.Context
	}
	DecodeStub        func(interface{}) error
	decodeMutex       sync.RWMutex
	decodeArgsForCall []struct {
		arg1 interface{}
	}
	decodeReturns struct {
		result1 error
	}
	decodeReturnsOnCall map[int]struct {
		result1 error
	}
	NackStub        func() error
	nackMutex       sync.RWMutex
	nackArgsForCall []struct {
	}
	nackReturns struct {
		result1 error
	}
	nackReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

// Ack ...
func (fake *FakeMessage) Ack() error {
	fake.ackMutex.Lock()
	ret, specificReturn := fake.ackReturnsOnCall[len(fake.ackArgsForCall)]
	fake.ackArgsForCall = append(fake.ackArgsForCall, struct {
	}{})
	fake.recordInvocation("Ack", []interface{}{})
	fake.ackMutex.Unlock()
	if fake.AckStub != nil {
		return fake.AckStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.ackReturns
	return fakeReturns.result1
}

// AckCallCount ...
func (fake *FakeMessage) AckCallCount() int {
	fake.ackMutex.RLock()
	defer fake.ackMutex.RUnlock()
	return len(fake.ackArgsForCall)
}

// AckCalls ...
func (fake *FakeMessage) AckCalls(stub func() error) {
	fake.ackMutex.Lock()
	defer fake.ackMutex.Unlock()
	fake.AckStub = stub
}

// AckReturns ...
func (fake *FakeMessage) AckReturns(result1 error) {
	fake.ackMutex.Lock()
	defer fake.ackMutex.Unlock()
	fake.AckStub = nil
	fake.ackReturns = struct {
		result1 error
	}{result1}
}

// AckReturnsOnCall ...
func (fake *FakeMessage) AckReturnsOnCall(i int, result1 error) {
	fake.ackMutex.Lock()
	defer fake.ackMutex.Unlock()
	fake.AckStub = nil
	if fake.ackReturnsOnCall == nil {
		fake.ackReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.ackReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

// Context ...
func (fake *FakeMessage) Context() context.Context {
	fake.contextMutex.Lock()
	ret, specificReturn := fake.contextReturnsOnCall[len(fake.contextArgsForCall)]
	fake.contextArgsForCall = append(fake.contextArgsForCall, struct {
	}{})
	fake.recordInvocation("Context", []interface{}{})
	fake.contextMutex.Unlock()
	if fake.ContextStub != nil {
		return fake.ContextStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.contextReturns
	return fakeReturns.result1
}

// ContextCallCount ...
func (fake *FakeMessage) ContextCallCount() int {
	fake.contextMutex.RLock()
	defer fake.contextMutex.RUnlock()
	return len(fake.contextArgsForCall)
}

// ContextCalls ...
func (fake *FakeMessage) ContextCalls(stub func() context.Context) {
	fake.contextMutex.Lock()
	defer fake.contextMutex.Unlock()
	fake.ContextStub = stub
}

// ContextReturns ...
func (fake *FakeMessage) ContextReturns(result1 context.Context) {
	fake.contextMutex.Lock()
	defer fake.contextMutex.Unlock()
	fake.ContextStub = nil
	fake.contextReturns = struct {
		result1 context.Context
	}{result1}
}

// ContextReturnsOnCall ...
func (fake *FakeMessage) ContextReturnsOnCall(i int, result1 context.Context) {
	fake.contextMutex.Lock()
	defer fake.contextMutex.Unlock()
	fake.ContextStub = nil
	if fake.contextReturnsOnCall == nil {
		fake.contextReturnsOnCall = make(map[int]struct {
			result1 context.Context
		})
	}
	fake.contextReturnsOnCall[i] = struct {
		result1 context.Context
	}{result1}
}

// Decode ...
func (fake *FakeMessage) Decode(arg1 interface{}) error {
	fake.decodeMutex.Lock()
	ret, specificReturn := fake.decodeReturnsOnCall[len(fake.decodeArgsForCall)]
	fake.decodeArgsForCall = append(fake.decodeArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	fake.recordInvocation("Decode", []interface{}{arg1})
	fake.decodeMutex.Unlock()
	if fake.DecodeStub != nil {
		return fake.DecodeStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.decodeReturns
	return fakeReturns.result1
}

// DecodeCallCount ...
func (fake *FakeMessage) DecodeCallCount() int {
	fake.decodeMutex.RLock()
	defer fake.decodeMutex.RUnlock()
	return len(fake.decodeArgsForCall)
}

// DecodeCalls ...
func (fake *FakeMessage) DecodeCalls(stub func(interface{}) error) {
	fake.decodeMutex.Lock()
	defer fake.decodeMutex.Unlock()
	fake.DecodeStub = stub
}

// DecodeArgsForCall ...
func (fake *FakeMessage) DecodeArgsForCall(i int) interface{} {
	fake.decodeMutex.RLock()
	defer fake.decodeMutex.RUnlock()
	argsForCall := fake.decodeArgsForCall[i]
	return argsForCall.arg1
}

// DecodeReturns ...
func (fake *FakeMessage) DecodeReturns(result1 error) {
	fake.decodeMutex.Lock()
	defer fake.decodeMutex.Unlock()
	fake.DecodeStub = nil
	fake.decodeReturns = struct {
		result1 error
	}{result1}
}

// DecodeReturnsOnCall ...
func (fake *FakeMessage) DecodeReturnsOnCall(i int, result1 error) {
	fake.decodeMutex.Lock()
	defer fake.decodeMutex.Unlock()
	fake.DecodeStub = nil
	if fake.decodeReturnsOnCall == nil {
		fake.decodeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.decodeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

// Nack ...
func (fake *FakeMessage) Nack() error {
	fake.nackMutex.Lock()
	ret, specificReturn := fake.nackReturnsOnCall[len(fake.nackArgsForCall)]
	fake.nackArgsForCall = append(fake.nackArgsForCall, struct {
	}{})
	fake.recordInvocation("Nack", []interface{}{})
	fake.nackMutex.Unlock()
	if fake.NackStub != nil {
		return fake.NackStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.nackReturns
	return fakeReturns.result1
}

// NackCallCount ...
func (fake *FakeMessage) NackCallCount() int {
	fake.nackMutex.RLock()
	defer fake.nackMutex.RUnlock()
	return len(fake.nackArgsForCall)
}

// NackCalls ...
func (fake *FakeMessage) NackCalls(stub func() error) {
	fake.nackMutex.Lock()
	defer fake.nackMutex.Unlock()
	fake.NackStub = stub
}

// NackReturns ...
func (fake *FakeMessage) NackReturns(result1 error) {
	fake.nackMutex.Lock()
	defer fake.nackMutex.Unlock()
	fake.NackStub = nil
	fake.nackReturns = struct {
		result1 error
	}{result1}
}

// NackReturnsOnCall ...
func (fake *FakeMessage) NackReturnsOnCall(i int, result1 error) {
	fake.nackMutex.Lock()
	defer fake.nackMutex.Unlock()
	fake.NackStub = nil
	if fake.nackReturnsOnCall == nil {
		fake.nackReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.nackReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

// Invocations ...
func (fake *FakeMessage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.ackMutex.RLock()
	defer fake.ackMutex.RUnlock()
	fake.contextMutex.RLock()
	defer fake.contextMutex.RUnlock()
	fake.decodeMutex.RLock()
	defer fake.decodeMutex.RUnlock()
	fake.nackMutex.RLock()
	defer fake.nackMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMessage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
