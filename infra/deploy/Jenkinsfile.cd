#!/usr/bin/env groovy

@Library("jenkins-devops-scripts") _
node('slave') {
    def git_utils = new com.beat.utilities.github()
    def stack_utils = new com.beat.utilities.stack()
    def helm_utils = new com.beat.utilities.helm3(this)
    def terraform_utils = new com.beat.utilities.terraform()

    def project = git_utils.determineRepoName(env.JOB_NAME)
    def commiter = git_utils.determineGitCommiter()
    def staging_branch = "staging-develop"
    def namespace = "mixpanel"
    def chartmuseumAPI = "https://chartmuseum.private.k8s.management.thebeat.co/api/charts"
    def monitoring_utils = new com.beat.utilities.monitoring()
    def notification_utils = new com.beat.utilities.notifications('PXuE13AjQdnb2hB5kXt5Hj2X', project, env.BUILD_URL, env.BUILD_NUMBER)
    notification_utils.defaultServerDeploymentsChannel = "#monitoring-squad9"

    // Define the stacks you want to deploy to
    def stacks = []
    // Define whether we are referring to prod environments
    def prod = false

    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */
        checkout scm

        if (env.TAG_NAME != null) {
            echo "This is the ${env.TAG_NAME} tag"
            branch_or_tag = env.TAG_NAME
            helmTag = env.TAG_NAME
            result = stack_utils.findStacksFromTags(branch_or_tag)
            stacks = result[0]
            prod = result[1]
        } else {
            echo "This is the ${env.BRANCH_NAME} branch"
            branch_or_tag = env.BRANCH_NAME
            // This here is a hack/workaround!
            // helmTag is actually the helm chart's version. However helm does not support
            // semver incompatible versions, that is the version does not start with something
            // like vx.x.x or plain x.x.x
            // In our case, when we build for staging-develop branch we have no version, since there is not git tag here.
            // So have a placeholder version of v1.0.0-staging-develop
            helmTag = "v1.0.0-${env.BRANCH_NAME}"
            stacks = stack_utils.stacksStaging()
            if (branch_or_tag != staging_branch) {
                sh "exit 0"
            }
        }

        notification_utils.slackNotifyDeploymentStarted(stacks)

        // Get Management stack variables
        envVarMapManagement = stack_utils.managementstackVariables()
        kubeconfig_id_mgmt = "KUBECONFIG_${envVarMapManagement.KUBERNETES_CLUSTER}"
    }

    stage('Build docker image') {
        /* This builds the actual image; synonymous to docker build on the command line */
        img = docker.build("beat/bollobas:${branch_or_tag}", "-f infra/deploy/local/Dockerfile --no-cache .")
    }

    stage('Push image to registry') {
        // If image is built, push it to registry
        docker.withRegistry("https://${envVarMapManagement.REGISTRY_SERVER}") {
            img.push("${branch_or_tag}")
        }
    }

    // This needs to be enabled when lint & tests are fixed
    stage('Run tests') {
        try {
            sh 'make ci'
        } catch (e) {
            sh 'make ci-cleanup'
            notification_utils.slackNotifyDeploymentFailure(stacks, STAGE_NAME)
            print(e)
            throw e
        } finally {
        }
    }

    stage("Helm lint") {
        try {
            helm_utils.helmLint("${kubeconfig_id_mgmt}", "infra/deploy/helm/bollobas")
        } catch (e) {
            currentBuild.result = 'FAILURE'
            notification_utils.slackNotifyDeploymentFailure(stacks, STAGE_NAME)
            throw e
        }
    }

    stage("Helm Build Package") {
        helm_utils.helmPackage("${kubeconfig_id_mgmt}", "infra/deploy/helm/bollobas", "${helmTag}")
    }

    stage("Push helm package to chartmuseum") {
        helm_utils.helmPush("bollobas", "${helmTag}", "${chartmuseumAPI}")
    }

    for (stack in stacks) {

        rds_writer_dns = "mysql-damson-writer.beat"
        rds_reader_dns = "mysql-damson-reader.beat"
        db_port        = 3306

        stage("Deploy helm chart at ${stack}") {

            // Default Values File
            def dockerFlags = ""
            def setList = ""
            dockerFlags = "-v ${env.WORKSPACE}/infra/deploy/helm/bollobas/values.yaml:/values.yaml"
            setList += " --values /values.yaml"

            // Define the file to overwrite the default values.yaml
            if (fileExists("charts/bollobas/values.${stack}.yaml")) {
                dockerFlags += " -v ${env.WORKSPACE}/infra/deploy/helm/bollobas/values.${stack}.yaml:/values.${stack}.yaml"
                setList += " --values /values.${stack}.yaml"
            }


            bollobas_cipher_key_env = "BOLLOBAS_CIPHER_KEY_DEV"
            bollobas_init_vector_env = "BOLLOBAS_INIT_VECTOR_DEV"
            bollobas_rest_key_env = "REST_TAXIDMIN_KEY"

            if (prod) {
                envVarMapping = stack_utils.stackVariables(stack)

                // /* Setup local variables */
                bollobas_mixpanel_token_env = "BOLLOBAS_MIXPANEL_TOKEN_PROD"

                bollobas_rest_endpoint_env = "https://rest${envVarMapping.SUFFIX}"
                bollobas_location_env = "${stack}"
                bollobas_log_level_env = "info"

                bollobas_data_removal_enabled = false

                helmName = "bollobas"

            } else {
                envVarMapping = stack_utils.stackVariables('dev')


                // /* Setup local variables */
                bollobas_mixpanel_token_env = "BOLLOBAS_MIXPANEL_TOKEN_DEV"
                bollobas_rest_endpoint_env = "https://${stack}.rest.sandbox.taxibeat.com"
                bollobas_location_env = "sandbox"
                bollobas_log_level_env = "debug"

                bollobas_data_removal_enabled = true

                helmName = "bollobas-${stack}"
            }

            // Get Management stack variables
            kubeconfig_id = "KUBECONFIG_${envVarMapping.KUBERNETES_CLUSTER}"

            try {
                dbCreds = "BOLLOBAS_DB_PASSWORD_DEV"
                if (prod) {
                    dbCreds = "BOLLOBAS_DB_PASSWORD_PROD"
                }
                withCredentials([
                    string(credentialsId: "${bollobas_cipher_key_env}", variable: 'bollobas_cipher_key'),
                    string(credentialsId: "${bollobas_init_vector_env}", variable: 'bollobas_init_vector'),
                    string(credentialsId: "${bollobas_mixpanel_token_env}", variable: 'bollobas_mixpanel_token'),
                    usernamePassword(credentialsId: "${dbCreds}", usernameVariable: 'bollobasDbUserName', passwordVariable: 'bollobasDbPassword'),
                    string(credentialsId: "${bollobas_rest_key_env}", variable: 'bollobas_rest_key')
                ]) {
                    setList = " --set image.registry=${envVarMapManagement.REGISTRY_SERVER}/beat/ \
                                    --set image.tag=${branch_or_tag} \
                                    --set changeCause=Jenkins=\"${RUN_DISPLAY_URL} Commiter=${commiter}\" \
                                    --set ingress.clusterSuffix=private.k8s.${envVarMapping.KUBERNETES_CLUSTER} \
                                    --set env.BOLLOBAS_KAFKA_CONNECTION_STRING=kafka.${envVarMapping.ROUTE53_PRIVATE_DOMAIN}:9092 \
                                    --set env.BOLLOBAS_CIPHER_KEY=${bollobas_cipher_key} \
                                    --set env.BOLLOBAS_INIT_VECTOR=${bollobas_init_vector} \
                                    --set env.BOLLOBAS_MIXPANEL_TOKEN=${bollobas_mixpanel_token} \
                                    --set env.PATRON_LOG_LEVEL=${bollobas_log_level_env} \
                                    --set env.PATRON_HTTP_DEFAULT_PORT=8700 \
                                    --set env.BOLLOBAS_KAFKA_DRIVER_TOPIC=driver_analytics \
                                    --set env.BOLLOBAS_KAFKA_PASSENGER_TOPIC=passenger_analytics \
                                    --set env.BOLLOBAS_KAFKA_REQUEST_TOPIC=request \
                                    --set env.BOLLOBAS_KAFKA_REQUEST_CANCEL_TOPIC=request_cancel \
                                    --set env.BOLLOBAS_KAFKA_RIDE_TOPIC=ride \
                                    --set env.BOLLOBAS_KAFKA_TIMEOUT=10s \
                                    --set env.MYSQL_USERNAME=${bollobasDbUserName} \
                                    --set env.MYSQL_PASS=${bollobasDbPassword} \
                                    --set env.BOLLOBAS_KAFKA_GROUP=arcns1 \
                                    --set env.REST_MIXPANEL_PATH=/taxidmin/bollobas/mixpanel-passenger-settings \
                                    --set env.BOLLOBAS_SETTINGS_DURATION=10s \
                                    --set env.BOLLOBAS_LOCATION=${bollobas_location_env} \
                                    --set env.BOLLOBAS_DATA_REMOVAL_ENABLED=${bollobas_data_removal_enabled} \
                                    --set env.REST_CONNECTION_STRING=${bollobas_rest_endpoint_env} \
                                    --set env.REST_KEY=${bollobas_rest_key} \
                                    --set env.MYSQL_WRITE=${rds_writer_dns} \
                                    --set env.MYSQL_READ=${rds_reader_dns} \
                                    --set env.MYSQL_PORT=${db_port}"

                    if (!prod) {
                        setList +=  " --set ingress.host=${stack}-bollobas \
                                    --set env.MYSQL_DB=bollobas_${stack}"
                    }

                    helm_utils.helmDeploy("${kubeconfig_id}", "${helmTag}", "${namespace}", "${setList}", "${helmName}", "beat/bollobas", dockerFlags)
                    currentBuild.result = 'SUCCESS'
                }

            } catch (e) {
                print(e)
                helm_utils.helmRollback("${kubeconfig_id}", 0, "${helmName}", "${namespace}")
                notification_utils.slackNotifyDeploymentFailure(stack, STAGE_NAME)
                throw e
            }
            notification_utils.slackNotifyDeploymentSuccess(stack)


            stage('Apply Prometheus rules if available') {
                try {
                    monitoring_utils.prometheusConfig("${kubeconfig_id}", "${namespace}", "infra/observe/alerting")
                } catch (e) {
                    println("Exception on applying prometheus rules")
                    println(e.toString())
                    def message = "deployment failed on `${STAGE_NAME}` at ${stacks} for ${project} <${env.BUILD_URL}console|${env.BUILD_NUMBER}>"
                    notification_utils.slackNotify('FAILURE', slackChannel, slackToken, message)
                    throw e
                }
            }

            stage('Apply Grafana rules if available') {
                try {
                    monitoring_utils.grafanaConfig("${kubeconfig_id}", "${namespace}", "infra/observe/dashboard")
                } catch (e) {
                    println("Exception on applying graphana rules")
                    println(e.toString())
                    def message = "deployment failed on `${STAGE_NAME}` at ${stacks} for ${project} <${env.BUILD_URL}console|${env.BUILD_NUMBER}>"
                    notification_utils.slackNotify('FAILURE', slackChannel, slackToken, message)
                    throw e
                }
            }
        }
    }
}
