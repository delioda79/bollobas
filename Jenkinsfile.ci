#!/usr/bin/env groovy

@Library("jenkins-devops-scripts@v1.6.0") _
node('slave') {
  def git_utils = new com.beat.utilities.github()
  def project = git_utils.determineRepoName(env.JOB_NAME)
  def slackToken = "PXuE13AjQdnb2hB5kXt5Hj2X"
  def notification_utils = new com.beat.utilities.notifications(slackToken, project, env.BUILD_URL, env.BUILD_NUMBER)
  def helm_utils = new com.beat.utilities.helm()
  def stack_utils = new com.beat.utilities.stack()
  def slackChannel = "#ci-builds"
  
  def commiter = git_utils.determineGitCommiter()
  stage('Clone repository') {
    /* Let's make sure we have the repository cloned to our workspace */
    checkout scm

    if (env.BRANCH_NAME == null) {
      echo "No branch found"
      sh "exit 0"
    }

    echo "This is the ${env.BRANCH_NAME} branch"
    branch = env.BRANCH_NAME
    envVarMapManagement = stack_utils.managementstackVariables()
  }

  stage("Helm lint") {
    envVarMapManagement = stack_utils.managementstackVariables()
    kubeconfig_id_mgmt = "KUBECONFIG_${envVarMapManagement.KUBERNETES_CLUSTER}"

    try {
      helm_utils.helmLint("${kubeconfig_id_mgmt}", "charts/bollobas")
      currentBuild.result = 'SUCCESS'
    } catch (e) {
      currentBuild.result = 'FAILURE'
      throw e
    } finally {
      def message = "Build <${env.BUILD_URL}console|${env.BUILD_NUMBER}> for <${env.JOB_DISPLAY_URL}|${env.JOB_NAME}> by ${commiter}: ${currentBuild.result} on stage ${STAGE_NAME} in ${currentBuild.durationString.replace(' and counting', '')}"
      notification_utils.slackNotify(currentBuild.result, slackChannel, slackToken, message)
    }
  }

  // This needs to be enabled when lint & tests are fixed
  stage('Run CI') {
    try {
      sh 'make ci'
      currentBuild.result = 'SUCCESS'
    } catch (e) {
      sh 'make ci-cleanup'
      currentBuild.result = 'FAILURE'
      throw e
    } finally {
      def message = "Build <${env.BUILD_URL}console|${env.BUILD_NUMBER}> for <${env.JOB_DISPLAY_URL}|${env.JOB_NAME}> by ${commiter}: ${currentBuild.result} on stage ${STAGE_NAME} in ${currentBuild.durationString.replace(' and counting', '')}"
      notification_utils.slackNotify(currentBuild.result, slackChannel, slackToken, message)
    }
  }
}
